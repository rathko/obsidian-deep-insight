import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { readFileSync, readdirSync } from 'fs';
import { join, dirname } from 'path';

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
https://github.com/rathko/obsidian-deep-insight
*/`;

const prod = (process.argv[2] === 'production');

// Function to generate patterns bundle
function generatePatternsBundle() {
    const patternsDir = 'src/fabric-patterns';
    const patterns = {};
    
    function scanDirectory(currentPath, basePath = '') {
        const entries = readdirSync(currentPath, { withFileTypes: true });
        
        entries.forEach(entry => {
            const fullPath = join(currentPath, entry.name);
            const relativePath = join(basePath, entry.name);
            
            if (entry.isDirectory()) {
                patterns[entry.name] = patterns[entry.name] || {};
                scanDirectory(fullPath, relativePath);
            } else if (entry.name === 'system.md' || entry.name === 'user.md') {
                const content = readFileSync(fullPath, 'utf-8');
                const parentDir = dirname(relativePath).split('/').pop();
                if (!patterns[parentDir]) {
                    patterns[parentDir] = {};
                }
                patterns[parentDir][entry.name.replace('.md', '')] = content;
            }
        });
    }
    
    scanDirectory(patternsDir);
    return `export const BUNDLED_PATTERNS = ${JSON.stringify(patterns, null, 2)};`;
}

const buildOptions = {
    banner: {
        js: banner,
    },
    entryPoints: ['src/main.ts'],
    bundle: true,
    external: [
        'obsidian',
        ...builtins,
    ],
    format: 'cjs',
    target: 'es2018',
    logLevel: "info",
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: 'main.js',
    plugins: [{
        name: 'patterns-bundle',
        setup(build) {
            build.onLoad({ filter: /patterns-bundle\.ts$/ }, () => ({
                contents: generatePatternsBundle(),
                loader: 'ts'
            }));
        }
    }],
};

if (prod) {
    esbuild.build(buildOptions).catch(() => process.exit(1));
} else {
    esbuild.context(buildOptions).then(context => {
        context.watch();
    }).catch(() => process.exit(1));
}