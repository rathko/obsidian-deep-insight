/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var w=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var x=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var I=(g,r)=>{for(var e in r)w(g,e,{get:r[e],enumerable:!0})},A=(g,r,e,t)=>{if(r&&typeof r=="object"||typeof r=="function")for(let s of x(r))!b.call(g,s)&&s!==e&&w(g,s,{get:()=>r[s],enumerable:!(t=E(r,s))||t.enumerable});return g};var S=g=>A(w({},"__esModule",{value:!0}),g);var T={};I(T,{default:()=>f});module.exports=S(T);var n=require("obsidian"),C={apiKey:"",model:"claude-3-5-sonnet-latest",systemPromptPath:"",userPromptPath:"",excludeFolders:["templates","archive"],chunkSize:50,maxTokensPerRequest:1e5,insertPosition:"cursor",defaultSystemPrompt:`You are a task extraction assistant. When analyzing notes:
1. Consider the note's folder path as context for task importance and categorization
2. Extract actionable tasks from the content
3. For each task include:
   - Source file path in parentheses
   - Relevant context based on the folder structure
4. Format tasks as:
   - [ ] Task description (Source: path/to/note) #folder-name

Group tasks by their source folders to maintain organizational context.`,defaultUserPrompt:"Please analyze these notes and create a prioritized list of tasks.",retryAttempts:3,defaultCombinationPrompt:`You are receiving multiple sets of extracted tasks from different chunks of notes. Your job is to:

1. Review all tasks across chunks
2. Remove any duplicates
3. Combine similar tasks
4. Organize tasks by their folders/categories
5. Ensure proper formatting is maintained
6. Keep all source file references
7. Maintain any priority indicators or context
8. Create a cohesive, well-structured final output

Here are the tasks from different chunks to combine:`},p=class extends Error{constructor(e,t,s){super(e);this.type=t;this.originalError=s;this.name="DeepInsightAIError"}},u=class{constructor(){this.isOnline=navigator.onLine;this.listeners=new Set;window.addEventListener("online",()=>this.updateOnlineStatus(!0)),window.addEventListener("offline",()=>this.updateOnlineStatus(!1))}static getInstance(){return u.instance||(u.instance=new u),u.instance}updateOnlineStatus(r){this.isOnline!==r&&(this.isOnline=r,this.notifyListeners())}notifyListeners(){this.listeners.forEach(r=>r(this.isOnline))}addListener(r){this.listeners.add(r),r(this.isOnline)}removeListener(r){this.listeners.delete(r)}checkOnlineStatus(){return navigator.onLine}};var P=class extends n.SuggestModal{constructor(e,t){super(e);this.callback=t}getSuggestions(){return["system","user"]}renderSuggestion(e,t){t.createEl("div",{cls:"deep-insight-ai-suggestion",text:`Set as ${e} prompt`}),t.createEl("small",{cls:"deep-insight-ai-suggestion-desc",text:e==="system"?"Define how the AI should process notes":"Define what specific tasks to generate"})}onChooseSuggestion(e){this.callback(e)}},y=class extends n.SuggestModal{constructor(e,t,s){super(e);this.plugin=t;this.onError=s}getSuggestions(){return this.app.vault.getMarkdownFiles().filter(e=>!this.plugin.settings.excludeFolders.some(t=>e.path.toLowerCase().startsWith(t.toLowerCase())))}renderSuggestion(e,t){let s=t.createDiv({cls:"deep-insight-ai-file-suggestion"});s.createEl("div",{cls:"deep-insight-ai-file-name",text:e.basename}),s.createEl("small",{cls:"deep-insight-ai-file-path",text:e.path})}async onChooseSuggestion(e){try{let t=await new Promise(s=>{new P(this.app,o=>s(o)).open()});t==="system"?this.plugin.settings.systemPromptPath=e.path:this.plugin.settings.userPromptPath=e.path,await this.plugin.saveSettings(),new n.Notice(`${t} prompt set to: ${e.basename}`)}catch(t){this.onError(new p("Failed to set prompt file","Settings",t instanceof Error?t:void 0))}}},v=class extends n.SuggestModal{constructor(e,t){super(e);this.plugin=t}getSuggestions(){return["top","bottom","cursor"]}renderSuggestion(e,t){let s=t.createDiv({cls:"deep-insight-ai-position-suggestion"}),o={top:"Insert at the beginning of the note",bottom:"Insert at the end of the note",cursor:"Insert at the current cursor position"};s.createEl("div",{text:`Insert at ${e}`}),s.createEl("small",{text:o[e]})}async onChooseSuggestion(e){this.plugin.settings.insertPosition=e,await this.plugin.saveSettings(),new n.Notice(`Insert position set to: ${e}`)}},f=class extends n.Plugin{async onload(){await this.loadSettings(),this.networkStatus=u.getInstance(),this.networkStatus.addListener(this.handleNetworkChange.bind(this)),this.addCommand({id:"generate-insights",name:"Generate Insights from Notes",editorCallback:(e,t)=>this.generateTasks(e).catch(this.handleError.bind(this))}),this.addCommand({id:"set-insert-position",name:"Set Insight Insertion Position",callback:()=>this.showInsertPositionModal()}),this.addCommand({id:"select-prompt-notes",name:"Select Prompt Notes",callback:()=>new y(this.app,this,this.handleError.bind(this)).open()}),this.addSettingTab(new k(this.app,this))}onunload(){this.networkStatus.removeListener(this.handleNetworkChange.bind(this))}handleNetworkChange(e){e?new n.Notice("Deep Insight AI: Network connection restored"):new n.Notice("Deep Insight AI: Network connection lost",5e3)}async loadSettings(){this.settings=Object.assign({},C,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}showInsertPositionModal(){new v(this.app,this).open()}async getPromptFromNote(e){try{if(!e)throw new Error("Prompt path not set");let t=this.app.vault.getAbstractFileByPath(e);if(!(t instanceof n.TFile))throw new Error("Prompt file not found");return await this.app.vault.read(t)}catch(t){return console.warn("Failed to read prompt, using default:",t),e===this.settings.systemPromptPath?this.settings.defaultSystemPrompt:this.settings.defaultUserPrompt}}async callAnthropicAPI(e){var t,s,o;try{if(!this.settings.apiKey)throw new p("API key not set","Settings");let i=await this.getPromptFromNote(this.settings.systemPromptPath),l=await this.getPromptFromNote(this.settings.userPromptPath),h={model:this.settings.model,max_tokens:4096,system:i||this.settings.defaultSystemPrompt,messages:[{role:"user",content:`${l||this.settings.defaultUserPrompt}

Notes Content:
${e}`}]};console.log("Deep Insight AI: Making API request:",{url:"https://api.anthropic.com/v1/messages",model:this.settings.model,contentLength:e.length,hasSystemPrompt:!!i,hasUserPrompt:!!l});let a=await(0,n.requestUrl)({url:"https://api.anthropic.com/v1/messages",method:"POST",headers:{"Content-Type":"application/json","x-api-key":this.settings.apiKey,"anthropic-version":"2023-06-01",accept:"application/json"},body:JSON.stringify(h),throw:!1});console.log("Deep Insight AI: Received API Response:",{status:a.status,contentLength:((t=a.text)==null?void 0:t.length)||0});let c;try{c=JSON.parse(a.text)}catch(m){throw console.error("Deep Insight AI: Failed to parse response"),new p("Failed to parse API response","API")}if(a.status!==200){console.error("Deep Insight AI: API Error:",{status:a.status,error:(s=c.error)==null?void 0:s.message});let m=((o=c.error)==null?void 0:o.message)||`API request failed with status ${a.status}`;throw new p(`API Error: ${m}`,"API")}if(!c.content||!Array.isArray(c.content)||c.content.length===0)throw new p("API response missing content","API");let d=c.content[0];if(!d||typeof d.text!="string")throw new p("Invalid API response format","API");return d.text}catch(i){throw console.error("Deep Insight AI: Error Details:",{type:i instanceof p?i.type:"Unknown",message:i instanceof Error?i.message:"Unknown error",stack:process.env.NODE_ENV==="development"&&i instanceof Error?i.stack:void 0}),i instanceof p?i:new p("API request failed: "+(i instanceof Error?i.message:"Unknown error"),"API",i instanceof Error?i:void 0)}}async generateTasks(e){try{if(!this.settings.apiKey){new n.Notice("Please set your Anthropic API key in the plugin settings");return}new n.Notice("Analyzing notes...");let t=await this.getAllNotesContent(),s=[];for(let o=0;o<t.length;o++){new n.Notice(`Processing chunk ${o+1} of ${t.length}...`);try{let i=await this.callAnthropicAPI(t[o].content);s.push(i)}catch(i){if(i instanceof p&&i.type==="Network"){new n.Notice("Network error: Please check your connection",5e3);return}throw i}}if(s.length>0){new n.Notice("Combining results...");let o=await this.combineChunkResults(s);await this.insertTasks(e,o),new n.Notice("Tasks generated and combined successfully!",5e3)}}catch(t){this.handleError(t instanceof Error?t:new Error(String(t)))}}async combineChunkResults(e){var o,i;if(e.length===1)return e[0];let s=`You are receiving multiple sets of extracted tasks from different chunks of notes. Your job is to:

1. Review all tasks across chunks
2. Remove any duplicates
3. Combine similar tasks
4. Organize tasks by their folders/categories
5. Ensure proper formatting is maintained
6. Keep all source file references
7. Maintain any priority indicators or context
8. Create a cohesive, well-structured final output

Here are the tasks from different chunks to combine:

${e.join(`

=== Next Chunk ===

`)}`;try{let l={model:this.settings.model,max_tokens:4096,system:this.settings.defaultSystemPrompt,messages:[{role:"user",content:s}]},h=await(0,n.requestUrl)({url:"https://api.anthropic.com/v1/messages",method:"POST",headers:{"Content-Type":"application/json","x-api-key":this.settings.apiKey,"anthropic-version":"2023-06-01",accept:"application/json"},body:JSON.stringify(l),throw:!1});if(h.status!==200)throw new p(`Failed to combine results: ${h.status}`,"API");let a=JSON.parse(h.text);if(!((i=(o=a.content)==null?void 0:o[0])!=null&&i.text))throw new p("Invalid response format when combining results","API");return a.content[0].text}catch(l){throw console.error("Failed to combine chunk results:",l),new p("Failed to combine results: "+(l instanceof Error?l.message:"Unknown error"),"Processing",l instanceof Error?l:void 0)}}handleError(e){let t=e instanceof p?`${e.type} Error: ${e.message}`:`Error: ${e.message}`;new n.Notice(t,5e3),console.error("Deep Insight AI Error:",e)}async getAllNotesContent(){let e=this.app.vault.getMarkdownFiles().filter(l=>!this.settings.excludeFolders.some(h=>l.path.toLowerCase().startsWith(h.toLowerCase()))),t=[],s="",o=0,i=0;for(let l of e)try{let h=await this.app.vault.read(l),a=l.path.substring(0,l.path.lastIndexOf("/")),c=`
    === Note Path: ${l.path} ===
    Folder: ${a||"root"}
    
    Content:
    ${h}
    
    === End Note ===
    
    `;s+=c,o+=c.length,i++,(i>=this.settings.chunkSize||o>=this.settings.maxTokensPerRequest)&&(t.push({content:s,size:o}),s="",o=0,i=0)}catch(h){new n.Notice(`Failed to read file ${l.path}`),console.error(`Error reading file ${l.path}:`,h)}if(s&&t.push({content:s,size:o}),t.length===0)throw new p("No valid notes found to process","Processing");return t}async insertTasks(e,t){let s=e.getCursor();switch(this.settings.insertPosition){case"top":e.replaceRange(`## Generated Tasks
${t}

`,{line:0,ch:0});break;case"bottom":let o=e.lastLine();e.replaceRange(`

## Generated Tasks
${t}`,{line:o,ch:e.getLine(o).length});break;case"cursor":e.replaceRange(`

## Generated Tasks
${t}
`,s);break}}},k=class extends n.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("style",{text:`
                .deep-insight-ai-prompt-textarea {
                    min-height: 200px !important;
                    width: 100%;
                    font-family: monospace;
                }
                .deep-insight-ai-prompt-container {
                    margin-bottom: 24px;
                }
            `}),new n.Setting(e).setName("Anthropic API Key").setDesc("Your Anthropic API key").addText(a=>a.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey).onChange(async c=>{this.plugin.settings.apiKey=c,await this.plugin.saveSettings()})),new n.Setting(e).setName("Model").setDesc("Select Claude model to use").addDropdown(a=>{let c={"claude-3-5-sonnet-latest":"Claude 3.5 Sonnet (Balanced)","claude-3-5-haiku-latest":"Claude 3.5 Haiku (Fast)"};a.addOptions(c).setValue(this.plugin.settings.model).onChange(async d=>{this.plugin.settings.model=d,await this.plugin.saveSettings();let m={"claude-3-5-sonnet-latest":"Recommended for detailed analysis","claude-3-5-haiku-latest":"Best for quick tasks"};new n.Notice(m[d],3e3)})}),new n.Setting(e).setName("Chunk Size").setDesc("Number of notes to process at once (lower for larger notes)").addSlider(a=>a.setLimits(10,500,10).setValue(this.plugin.settings.chunkSize).setDynamicTooltip().onChange(async c=>{this.plugin.settings.chunkSize=c,await this.plugin.saveSettings()})),new n.Setting(e).setName("Excluded Folders").setDesc("Comma-separated list of folders to exclude").addText(a=>a.setPlaceholder("templates,archive").setValue(this.plugin.settings.excludeFolders.join(",")).onChange(async c=>{this.plugin.settings.excludeFolders=c.split(",").map(d=>d.trim()),await this.plugin.saveSettings()})),e.createEl("h3",{text:"Default Prompts"});let t=e.createDiv({cls:"deep-insight-ai-prompt-container"});t.createEl("h4",{text:"Default System Prompt"}),t.createEl("p",{text:"Used when no system prompt note is selected. Defines how the AI should process notes.",cls:"setting-item-description"});let s=t.createEl("textarea",{cls:"deep-insight-ai-prompt-textarea"});s.value=this.plugin.settings.defaultSystemPrompt,s.addEventListener("change",async a=>{let c=a.target;this.plugin.settings.defaultSystemPrompt=c.value,await this.plugin.saveSettings()});let o=e.createDiv({cls:"deep-insight-ai-prompt-container"});o.createEl("h4",{text:"Default User Prompt"}),o.createEl("p",{text:"Used when no user prompt note is selected. Defines what specific insight to generate.",cls:"setting-item-description"});let i=o.createEl("textarea",{cls:"deep-insight-ai-prompt-textarea"});i.value=this.plugin.settings.defaultUserPrompt,i.addEventListener("change",async a=>{let c=a.target;this.plugin.settings.defaultUserPrompt=c.value,await this.plugin.saveSettings()});let l=e.createDiv({cls:"deep-insight-ai-prompt-container"});l.createEl("h4",{text:"Default Combination Prompt"}),l.createEl("p",{text:"Used when combining tasks from multiple chunks. Defines how to merge and organize tasks.",cls:"setting-item-description"});let h=l.createEl("textarea",{cls:"deep-insight-ai-prompt-textarea"});h.value=this.plugin.settings.defaultCombinationPrompt,h.addEventListener("change",async a=>{let c=a.target;this.plugin.settings.defaultCombinationPrompt=c.value,await this.plugin.saveSettings()})}};0&&(module.exports={});
