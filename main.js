/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
var f=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var A=(l,o)=>{for(var e in o)f(l,e,{get:o[e],enumerable:!0})},T=(l,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let s of S(o))!b.call(l,s)&&s!==e&&f(l,s,{get:()=>o[s],enumerable:!(t=E(o,s))||t.enumerable});return l};var x=l=>T(f({},"__esModule",{value:!0}),l);var M={};A(M,{default:()=>u});module.exports=x(M);var n=require("obsidian"),I={apiKey:"",model:"claude-3-5-sonnet-latest",systemPromptPath:"",userPromptPath:"",excludeFolders:["templates","archive"],chunkSize:50,maxTokensPerRequest:1e5,insertPosition:"cursor",defaultSystemPrompt:`You are a task extraction assistant. When analyzing notes:
1. Consider the note's folder path as context for task importance and categorization
2. Extract actionable tasks from the content
3. For each task include:
   - Source file path in parentheses
   - Relevant context based on the folder structure
4. Format tasks as:
   - [ ] Task description (Source: path/to/note) #folder-name

Group tasks by their source folders to maintain organizational context.`,defaultUserPrompt:"Please analyze these notes and create a prioritized list of tasks.",retryAttempts:3,offlineModeEnabled:!1},a=class extends Error{constructor(e,t,s){super(e);this.type=t;this.originalError=s;this.name="TaskMindError"}},h=class{constructor(){this.isOnline=navigator.onLine;this.listeners=new Set;window.addEventListener("online",()=>this.updateOnlineStatus(!0)),window.addEventListener("offline",()=>this.updateOnlineStatus(!1))}static getInstance(){return h.instance||(h.instance=new h),h.instance}updateOnlineStatus(o){this.isOnline!==o&&(this.isOnline=o,this.notifyListeners())}notifyListeners(){this.listeners.forEach(o=>o(this.isOnline))}addListener(o){this.listeners.add(o),o(this.isOnline)}removeListener(o){this.listeners.delete(o)}checkOnlineStatus(){return navigator.onLine}};var w=class extends n.SuggestModal{constructor(e,t){super(e);this.callback=t}getSuggestions(){return["system","user"]}renderSuggestion(e,t){t.createEl("div",{cls:"task-mind-suggestion",text:`Set as ${e} prompt`}),t.createEl("small",{cls:"task-mind-suggestion-desc",text:e==="system"?"Define how the AI should process notes":"Define what specific tasks to generate"})}onChooseSuggestion(e){this.callback(e)}},P=class extends n.SuggestModal{constructor(e,t,s){super(e);this.plugin=t;this.onError=s}getSuggestions(){return this.app.vault.getMarkdownFiles().filter(e=>!this.plugin.settings.excludeFolders.some(t=>e.path.startsWith(t)))}renderSuggestion(e,t){let s=t.createDiv({cls:"task-mind-file-suggestion"});s.createEl("div",{cls:"task-mind-file-name",text:e.basename}),s.createEl("small",{cls:"task-mind-file-path",text:e.path})}async onChooseSuggestion(e){try{let t=await new Promise(s=>{new w(this.app,r=>s(r)).open()});t==="system"?this.plugin.settings.systemPromptPath=e.path:this.plugin.settings.userPromptPath=e.path,await this.plugin.saveSettings(),new n.Notice(`${t} prompt set to: ${e.basename}`)}catch(t){this.onError(new a("Failed to set prompt file","Settings",t instanceof Error?t:void 0))}}},y=class extends n.SuggestModal{constructor(e,t){super(e);this.plugin=t}getSuggestions(){return["top","bottom","cursor"]}renderSuggestion(e,t){let s=t.createDiv({cls:"task-mind-position-suggestion"}),r={top:"Insert at the beginning of the note",bottom:"Insert at the end of the note",cursor:"Insert at the current cursor position"};s.createEl("div",{text:`Insert at ${e}`}),s.createEl("small",{text:r[e]})}async onChooseSuggestion(e){this.plugin.settings.insertPosition=e,await this.plugin.saveSettings(),new n.Notice(`Insert position set to: ${e}`)}},u=class extends n.Plugin{async onload(){await this.loadSettings(),this.networkStatus=h.getInstance(),this.networkStatus.addListener(this.handleNetworkChange.bind(this)),this.addCommand({id:"generate-tasks",name:"Generate Tasks from Notes",editorCallback:(e,t)=>this.generateTasks(e).catch(this.handleError.bind(this))}),this.addCommand({id:"set-insert-position",name:"Set Task Insertion Position",callback:()=>this.showInsertPositionModal()}),this.addCommand({id:"select-prompt-notes",name:"Select Prompt Notes",callback:()=>new P(this.app,this,this.handleError.bind(this)).open()}),this.addCommand({id:"toggle-offline-mode",name:"Toggle Offline Mode",callback:()=>{this.settings.offlineModeEnabled=!this.settings.offlineModeEnabled,this.saveSettings(),new n.Notice(`Offline mode ${this.settings.offlineModeEnabled?"enabled":"disabled"}`)}}),this.addSettingTab(new k(this.app,this))}onunload(){this.networkStatus.removeListener(this.handleNetworkChange.bind(this))}handleNetworkChange(e){e?new n.Notice("TaskMind: Network connection restored"):new n.Notice("TaskMind: Network connection lost",5e3)}async loadSettings(){this.settings=Object.assign({},I,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}showInsertPositionModal(){new y(this.app,this).open()}async getPromptFromNote(e){try{if(!e)throw new Error("Prompt path not set");let t=this.app.vault.getAbstractFileByPath(e);if(!(t instanceof n.TFile))throw new Error("Prompt file not found");return await this.app.vault.read(t)}catch(t){return console.warn("Failed to read prompt, using default:",t),e===this.settings.systemPromptPath?this.settings.defaultSystemPrompt:this.settings.defaultUserPrompt}}async callAnthropicAPI(e){var t,s,r;if(this.settings.offlineModeEnabled)throw new a("Offline mode enabled","Network");try{if(!this.settings.apiKey)throw new a("API key not set","Settings");let i=await this.getPromptFromNote(this.settings.systemPromptPath),c=await this.getPromptFromNote(this.settings.userPromptPath),g={model:this.settings.model,max_tokens:4096,system:i||this.settings.defaultSystemPrompt,messages:[{role:"user",content:`${c||this.settings.defaultUserPrompt}

Notes Content:
${e}`}]};console.log("TaskMind: Making API request:",{url:"https://api.anthropic.com/v1/messages",model:this.settings.model,contentLength:e.length,hasSystemPrompt:!!i,hasUserPrompt:!!c});let p=await(0,n.requestUrl)({url:"https://api.anthropic.com/v1/messages",method:"POST",headers:{"Content-Type":"application/json","x-api-key":this.settings.apiKey,"anthropic-version":"2023-06-01",accept:"application/json"},body:JSON.stringify(g),throw:!1});console.log("TaskMind: Received API Response:",{status:p.status,contentLength:((t=p.text)==null?void 0:t.length)||0});let d;try{d=JSON.parse(p.text)}catch(v){throw console.error("TaskMind: Failed to parse response"),new a("Failed to parse API response","API")}if(p.status!==200){console.error("TaskMind: API Error:",{status:p.status,error:(s=d.error)==null?void 0:s.message});let v=((r=d.error)==null?void 0:r.message)||`API request failed with status ${p.status}`;throw new a(`API Error: ${v}`,"API")}if(!d.content||!Array.isArray(d.content)||d.content.length===0)throw new a("API response missing content","API");let m=d.content[0];if(!m||typeof m.text!="string")throw new a("Invalid API response format","API");return m.text}catch(i){throw console.error("TaskMind: Error Details:",{type:i instanceof a?i.type:"Unknown",message:i instanceof Error?i.message:"Unknown error",stack:process.env.NODE_ENV==="development"&&i instanceof Error?i.stack:void 0}),i instanceof a?i:new a("API request failed: "+(i instanceof Error?i.message:"Unknown error"),"API",i instanceof Error?i:void 0)}}async generateTasks(e){try{if(!this.settings.apiKey){new n.Notice("Please set your Anthropic API key in the plugin settings");return}new n.Notice("Analyzing notes...");let t=await this.getAllNotesContent(),s="";for(let r=0;r<t.length;r++){new n.Notice(`Processing chunk ${r+1} of ${t.length}...`);try{let i=await this.callAnthropicAPI(t[r].content);s+=i+`

`}catch(i){if(i instanceof a&&i.type==="Network"){new n.Notice("Network error: Please check your connection or enable offline mode",5e3);return}throw i}}await this.insertTasks(e,s),new n.Notice("Tasks generated successfully!",5e3)}catch(t){this.handleError(t instanceof Error?t:new Error(String(t)))}}handleError(e){let t=e instanceof a?`${e.type} Error: ${e.message}`:`Error: ${e.message}`;new n.Notice(t,5e3),console.error("TaskMind Error:",e)}async getAllNotesContent(){let e=this.app.vault.getMarkdownFiles().filter(c=>!this.settings.excludeFolders.some(g=>c.path.startsWith(g))),t=[],s="",r=0,i=0;for(let c of e)try{let g=await this.app.vault.read(c),p=c.path.substring(0,c.path.lastIndexOf("/")),d=`
    === Note Path: ${c.path} ===
    Folder: ${p||"root"}
    
    Content:
    ${g}
    
    === End Note ===
    
    `;s+=d,r+=d.length,i++,(i>=this.settings.chunkSize||r>=this.settings.maxTokensPerRequest)&&(t.push({content:s,size:r}),s="",r=0,i=0)}catch(g){new n.Notice(`Failed to read file ${c.path}`),console.error(`Error reading file ${c.path}:`,g)}if(s&&t.push({content:s,size:r}),t.length===0)throw new a("No valid notes found to process","Processing");return t}async insertTasks(e,t){let s=e.getCursor();switch(this.settings.insertPosition){case"top":e.replaceRange(`## Generated Tasks
${t}

`,{line:0,ch:0});break;case"bottom":let r=e.lastLine();e.replaceRange(`

## Generated Tasks
${t}`,{line:r,ch:e.getLine(r).length});break;case"cursor":e.replaceRange(`

## Generated Tasks
${t}
`,s);break}}},k=class extends n.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new n.Setting(e).setName("Anthropic API Key").setDesc("Your Anthropic API key").addText(t=>t.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey).onChange(async s=>{this.plugin.settings.apiKey=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Model").setDesc("Select Claude model to use").addDropdown(t=>{let s={"claude-3-5-sonnet-latest":"Claude 3.5 Sonnet (Balanced)","claude-3-5-haiku-latest":"Claude 3.5 Haiku (Fast)"};t.addOptions(s).setValue(this.plugin.settings.model).onChange(async r=>{this.plugin.settings.model=r,await this.plugin.saveSettings();let i={"claude-3-5-sonnet-latest":"Recommended for detailed analysis","claude-3-5-haiku-latest":"Best for quick tasks"};new n.Notice(i[r],3e3)})}),new n.Setting(e).setName("Chunk Size").setDesc("Number of notes to process at once (lower for larger notes)").addSlider(t=>t.setLimits(10,500,10).setValue(this.plugin.settings.chunkSize).setDynamicTooltip().onChange(async s=>{this.plugin.settings.chunkSize=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Excluded Folders").setDesc("Comma-separated list of folders to exclude").addText(t=>t.setPlaceholder("templates,archive").setValue(this.plugin.settings.excludeFolders.join(",")).onChange(async s=>{this.plugin.settings.excludeFolders=s.split(",").map(r=>r.trim()),await this.plugin.saveSettings()})),new n.Setting(e).setName("Offline Mode").setDesc("Enable to prevent API calls when working offline").addToggle(t=>t.setValue(this.plugin.settings.offlineModeEnabled).onChange(async s=>{this.plugin.settings.offlineModeEnabled=s,await this.plugin.saveSettings(),new n.Notice(`Offline mode ${s?"enabled":"disabled"}`)})),e.createEl("h3",{text:"Default Prompts"}),new n.Setting(e).setName("Default System Prompt").setDesc("Used when no system prompt note is selected").addTextArea(t=>t.setPlaceholder("Enter default system prompt").setValue(this.plugin.settings.defaultSystemPrompt).onChange(async s=>{this.plugin.settings.defaultSystemPrompt=s,await this.plugin.saveSettings()})),new n.Setting(e).setName("Default User Prompt").setDesc("Used when no user prompt note is selected").addTextArea(t=>t.setPlaceholder("Enter default user prompt").setValue(this.plugin.settings.defaultUserPrompt).onChange(async s=>{this.plugin.settings.defaultUserPrompt=s,await this.plugin.saveSettings()}))}};0&&(module.exports={});
